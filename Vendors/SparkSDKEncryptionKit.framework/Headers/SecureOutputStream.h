#import <Foundation/Foundation.h>

@class SecureContentReference;

@interface SecureOutputStream : NSOutputStream <NSStreamDelegate>

/**
 Initialize the SecureOutputStream by providing an NSOutputStream to which
 it may write decrypted data, and a SecurityContentReference to provide the
 scheme, key material, and other metadata needed for decryption.

 \param stream A "downstream" NSOutputStream to which decrypted data is written.
 \param scr    The SecureContentReference that shall be used to reference the
               data being decrypted to the given NSOutputStream.
 \returns      The initialized SecureInputStream.
 */
- (instancetype)initWithStream:(NSOutputStream *)stream
                           scr:(SecureContentReference *)scr
                         error:(NSError **)error;

/**
 The SecureOutputStream implements the NSStreamDelegate protocol whereby it
 listens for events from the "downstream" NSOutputStream.  A client application
 of the SecureOutputStream may similarly assign itself as delegate of the
 SecureOutputStream and receive streaming events.  For the most part, events
 generated by the "downstream" NSOutputStream are simply forwarded through to
 the delegate of the SecureOutputStream. Clients of the SecureOutputStream class 
 should not invoke this method directly.
 
 \param stream    The stream from which event messages are originating.
 \param eventCode A code describing the type of stream event.
 */
- (void)stream:(NSStream *)stream handleEvent:(NSStreamEvent)eventCode;

/**
 The standard NSString write message.  The client application may invoke this
 from within its own delegate event handling code in order to write data to
 the stream.
 \param buffer    The buffer from which data will be read for decrypting.
 \param requested The maximum number of bytes that receiver should read.
 \returns         The number of bytes written, or -1 if an error occurred.
 */
- (NSInteger)write:(const uint8_t *)buffer maxLength:(NSUInteger)requested;

/**
 Flushes, as much as possible, all data buffered within the SecureOutputStream.
 
 \returns True if all data thus far written to the SecureOutputStream has been 
          sucessfully decrypted and written to the "downstream" NSOutputStream.
          Returns false if any data remains buffered within the stream object.
 */
- (BOOL)flush;

/**
 Returns the number of bytes currently available for writing to the stream.
 */
- (BOOL)hasSpaceAvailable;

/**
 Close the stream.  Will also close the "downstream" NSOutputStream.
 */
- (void)close;

/**
 The following are standard API methods of an NSStream.  The implementation
 for each of these is essentially a proxy to the contained NSInputStream
 provided in the initWithStream.
 */
- (id<NSStreamDelegate>)delegate;
- (void)setDelegate:(id<NSStreamDelegate>)delegate;
- (void)open;
- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;
- (void)removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode;
- (id)propertyForKey:(NSString *)key;
- (BOOL)setProperty:(id)property forKey:(NSString *)key;
- (NSStreamStatus)streamStatus;
- (NSError *)streamError;

@end
